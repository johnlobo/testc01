                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _init
                             13 	.globl _updateCharacter
                             14 	.globl _motionUpdate
                             15 	.globl _getCharacterInput
                             16 	.globl _printDebugInfo
                             17 	.globl _eraseDebugInfo
                             18 	.globl _printWayPoints
                             19 	.globl _printCharacter
                             20 	.globl _eraseCharacter
                             21 	.globl _myInterruptHandler
                             22 	.globl _wait4OneKey
                             23 	.globl _cosine
                             24 	.globl _sine
                             25 	.globl _drawText
                             26 	.globl _abs
                             27 	.globl _cpct_getScreenPtr
                             28 	.globl _cpct_setVideoMode
                             29 	.globl _cpct_drawSolidBox
                             30 	.globl _cpct_px2byteM0
                             31 	.globl _cpct_isKeyPressed
                             32 	.globl _cpct_scanKeyboard_f
                             33 	.globl _cpct_waitHalts
                             34 	.globl _cpct_setInterruptHandler
                             35 	.globl _sprintf
                             36 	.globl _i_time
                             37 	.globl _g_nInterrupt
                             38 	.globl _pause
                             39 	.globl _wp
                             40 ;--------------------------------------------------------
                             41 ; special function registers
                             42 ;--------------------------------------------------------
                             43 ;--------------------------------------------------------
                             44 ; ram data
                             45 ;--------------------------------------------------------
                             46 	.area _DATA
   0000                      47 _pause::
   0000                      48 	.ds 1
   0001                      49 _g_nInterrupt::
   0001                      50 	.ds 1
   0002                      51 _i_time::
   0002                      52 	.ds 4
                             53 ;--------------------------------------------------------
                             54 ; ram data
                             55 ;--------------------------------------------------------
                             56 	.area _INITIALIZED
                             57 ;--------------------------------------------------------
                             58 ; absolute external ram data
                             59 ;--------------------------------------------------------
                             60 	.area _DABS (ABS)
                             61 ;--------------------------------------------------------
                             62 ; global & static initialisations
                             63 ;--------------------------------------------------------
                             64 	.area _HOME
                             65 	.area _GSINIT
                             66 	.area _GSFINAL
                             67 	.area _GSINIT
                             68 ;--------------------------------------------------------
                             69 ; Home
                             70 ;--------------------------------------------------------
                             71 	.area _HOME
                             72 	.area _HOME
                             73 ;--------------------------------------------------------
                             74 ; code
                             75 ;--------------------------------------------------------
                             76 	.area _CODE
                             77 ;src/main.c:29: cpctm_createTransparentMaskTable(g_tablatrans, 0x200, M0, 0);
                             78 ;	---------------------------------
                             79 ; Function dummy_cpct_transparentMaskTable0M0_container
                             80 ; ---------------------------------
   0000                      81 _dummy_cpct_transparentMaskTable0M0_container::
                             82 	.area _g_tablatrans_ (ABS) 
   0200                      83 	.org 0x200 
   0200                      84 	 _g_tablatrans::
   0200 FF AA 55 00 AA AA    85 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0208 55 00 55 00 00 00    86 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0210 AA AA 00 00 AA AA    87 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0218 00 00 00 00 00 00    88 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0220 55 00 55 00 00 00    89 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0228 55 00 55 00 00 00    90 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0230 00 00 00 00 00 00    91 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0238 00 00 00 00 00 00    92 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0240 AA AA 00 00 AA AA    93 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0248 00 00 00 00 00 00    94 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0250 AA AA 00 00 AA AA    95 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0258 00 00 00 00 00 00    96 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0260 00 00 00 00 00 00    97 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0268 00 00 00 00 00 00    98 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0270 00 00 00 00 00 00    99 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0278 00 00 00 00 00 00   100 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0280 55 00 55 00 00 00   101 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0288 55 00 55 00 00 00   102 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0290 00 00 00 00 00 00   103 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0298 00 00 00 00 00 00   104 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   02A0 55 00 55 00 00 00   105 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   02A8 55 00 55 00 00 00   106 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   02B0 00 00 00 00 00 00   107 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   02B8 00 00 00 00 00 00   108 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   02C0 00 00 00 00 00 00   109 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   02C8 00 00 00 00 00 00   110 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   02D0 00 00 00 00 00 00   111 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   02D8 00 00 00 00 00 00   112 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   02E0 00 00 00 00 00 00   113 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   02E8 00 00 00 00 00 00   114 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   02F0 00 00 00 00 00 00   115 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   02F8 00 00 00 00 00 00   116 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            117 	.area _CSEG (REL, CON) 
                            118 ;src/main.c:46: void myInterruptHandler()
                            119 ;	---------------------------------
                            120 ; Function myInterruptHandler
                            121 ; ---------------------------------
   0000                     122 _myInterruptHandler::
                            123 ;src/main.c:49: i_time++;
   0000 FD 21r02r00   [14]  124 	ld	iy, #_i_time
   0004 FD 34 00      [23]  125 	inc	0 (iy)
   0007 20 0D         [12]  126 	jr	NZ,00109$
   0009 FD 34 01      [23]  127 	inc	1 (iy)
   000C 20 08         [12]  128 	jr	NZ,00109$
   000E FD 34 02      [23]  129 	inc	2 (iy)
   0011 20 03         [12]  130 	jr	NZ,00109$
   0013 FD 34 03      [23]  131 	inc	3 (iy)
   0016                     132 00109$:
                            133 ;src/main.c:51: if (++g_nInterrupt == 6)
   0016 FD 21r01r00   [14]  134 	ld	iy, #_g_nInterrupt
   001A FD 34 00      [23]  135 	inc	0 (iy)
   001D FD 7E 00      [19]  136 	ld	a, 0 (iy)
   0020 D6 06         [ 7]  137 	sub	a, #0x06
   0022 C0            [11]  138 	ret	NZ
                            139 ;src/main.c:53: cpct_scanKeyboard_f();
   0023 CDr00r00      [17]  140 	call	_cpct_scanKeyboard_f
                            141 ;src/main.c:54: g_nInterrupt = 0;
   0026 21r01r00      [10]  142 	ld	hl,#_g_nInterrupt + 0
   0029 36 00         [10]  143 	ld	(hl), #0x00
   002B C9            [10]  144 	ret
   002C                     145 _wp:
   002C 01                  146 	.db #0x01	; 1
   002D 01                  147 	.db #0x01	; 1
   002E 0A                  148 	.db #0x0a	; 10
   002F 64                  149 	.db #0x64	; 100	'd'
   0030 28                  150 	.db #0x28	; 40
   0031 B4                  151 	.db #0xb4	; 180
   0032 46                  152 	.db #0x46	; 70	'F'
   0033 64                  153 	.db #0x64	; 100	'd'
                            154 ;src/main.c:58: void eraseCharacter(TCharacter *c){
                            155 ;	---------------------------------
                            156 ; Function eraseCharacter
                            157 ; ---------------------------------
   0034                     158 _eraseCharacter::
   0034 DD E5         [15]  159 	push	ix
   0036 DD 21 00 00   [14]  160 	ld	ix,#0
   003A DD 39         [15]  161 	add	ix,sp
                            162 ;src/main.c:62: x=c->px/256;
   003C DD 5E 04      [19]  163 	ld	e,4 (ix)
   003F DD 56 05      [19]  164 	ld	d,5 (ix)
   0042 6B            [ 4]  165 	ld	l, e
   0043 62            [ 4]  166 	ld	h, d
   0044 01 04 00      [10]  167 	ld	bc, #0x0004
   0047 09            [11]  168 	add	hl, bc
   0048 46            [ 7]  169 	ld	b, (hl)
   0049 23            [ 6]  170 	inc	hl
   004A 4E            [ 7]  171 	ld	c, (hl)
                            172 ;src/main.c:63: y=c->py/256;
   004B EB            [ 4]  173 	ex	de,hl
   004C 11 06 00      [10]  174 	ld	de, #0x0006
   004F 19            [11]  175 	add	hl, de
   0050 5E            [ 7]  176 	ld	e, (hl)
   0051 23            [ 6]  177 	inc	hl
   0052 56            [ 7]  178 	ld	d, (hl)
                            179 ;src/main.c:65: pvmem = cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0053 59            [ 4]  180 	ld	e, c
   0054 D5            [11]  181 	push	de
   0055 21 00 C0      [10]  182 	ld	hl, #0xc000
   0058 E5            [11]  183 	push	hl
   0059 CDr00r00      [17]  184 	call	_cpct_getScreenPtr
                            185 ;src/main.c:66: cpct_drawSolidBox (pvmem, cpct_px2byteM0 (0, 0), CH_WIDTH, CH_HEIGHT);
   005C E5            [11]  186 	push	hl
   005D 21 00 00      [10]  187 	ld	hl, #0x0000
   0060 E5            [11]  188 	push	hl
   0061 CDr00r00      [17]  189 	call	_cpct_px2byteM0
   0064 55            [ 4]  190 	ld	d, l
   0065 C1            [10]  191 	pop	bc
   0066 21 06 06      [10]  192 	ld	hl, #0x0606
   0069 E5            [11]  193 	push	hl
   006A D5            [11]  194 	push	de
   006B 33            [ 6]  195 	inc	sp
   006C C5            [11]  196 	push	bc
   006D CDr00r00      [17]  197 	call	_cpct_drawSolidBox
   0070 F1            [10]  198 	pop	af
   0071 F1            [10]  199 	pop	af
   0072 33            [ 6]  200 	inc	sp
   0073 DD E1         [14]  201 	pop	ix
   0075 C9            [10]  202 	ret
                            203 ;src/main.c:69: void printCharacter(TCharacter *c){
                            204 ;	---------------------------------
                            205 ; Function printCharacter
                            206 ; ---------------------------------
   0076                     207 _printCharacter::
   0076 DD E5         [15]  208 	push	ix
   0078 DD 21 00 00   [14]  209 	ld	ix,#0
   007C DD 39         [15]  210 	add	ix,sp
   007E 3B            [ 6]  211 	dec	sp
                            212 ;src/main.c:75: x = c->x >> 8;
   007F DD 5E 04      [19]  213 	ld	e,4 (ix)
   0082 DD 56 05      [19]  214 	ld	d,5 (ix)
   0085 6B            [ 4]  215 	ld	l, e
   0086 62            [ 4]  216 	ld	h, d
   0087 46            [ 7]  217 	ld	b, (hl)
   0088 23            [ 6]  218 	inc	hl
   0089 4E            [ 7]  219 	ld	c, (hl)
                            220 ;src/main.c:76: y = c->y >> 8;
   008A 6B            [ 4]  221 	ld	l, e
   008B 62            [ 4]  222 	ld	h, d
   008C 23            [ 6]  223 	inc	hl
   008D 23            [ 6]  224 	inc	hl
   008E 7E            [ 7]  225 	ld	a, (hl)
   008F 23            [ 6]  226 	inc	hl
   0090 46            [ 7]  227 	ld	b, (hl)
                            228 ;src/main.c:78: pvmem = cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   0091 C5            [11]  229 	push	bc
   0092 D5            [11]  230 	push	de
   0093 C5            [11]  231 	push	bc
   0094 21 00 C0      [10]  232 	ld	hl, #0xc000
   0097 E5            [11]  233 	push	hl
   0098 CDr00r00      [17]  234 	call	_cpct_getScreenPtr
   009B D1            [10]  235 	pop	de
   009C C1            [10]  236 	pop	bc
                            237 ;src/main.c:79: cpct_drawSolidBox (pvmem, cpct_px2byteM0 (CH_COLOR, CH_COLOR), CH_WIDTH, CH_HEIGHT);
   009D E5            [11]  238 	push	hl
   009E C5            [11]  239 	push	bc
   009F D5            [11]  240 	push	de
   00A0 21 03 03      [10]  241 	ld	hl, #0x0303
   00A3 E5            [11]  242 	push	hl
   00A4 CDr00r00      [17]  243 	call	_cpct_px2byteM0
   00A7 DD 75 FF      [19]  244 	ld	-1 (ix), l
   00AA D1            [10]  245 	pop	de
   00AB C1            [10]  246 	pop	bc
   00AC FD E1         [14]  247 	pop	iy
   00AE C5            [11]  248 	push	bc
   00AF D5            [11]  249 	push	de
   00B0 21 06 06      [10]  250 	ld	hl, #0x0606
   00B3 E5            [11]  251 	push	hl
   00B4 DD 7E FF      [19]  252 	ld	a, -1 (ix)
   00B7 F5            [11]  253 	push	af
   00B8 33            [ 6]  254 	inc	sp
   00B9 FD E5         [15]  255 	push	iy
   00BB CDr00r00      [17]  256 	call	_cpct_drawSolidBox
   00BE F1            [10]  257 	pop	af
   00BF F1            [10]  258 	pop	af
   00C0 33            [ 6]  259 	inc	sp
   00C1 D1            [10]  260 	pop	de
   00C2 C1            [10]  261 	pop	bc
                            262 ;src/main.c:81: if (c->dir<32){
   00C3 D5            [11]  263 	push	de
   00C4 FD E1         [14]  264 	pop	iy
   00C6 FD 5E 0E      [19]  265 	ld	e, 14 (iy)
                            266 ;src/main.c:82: x = x + 4;
   00C9 69            [ 4]  267 	ld	l, c
   00CA 2C            [ 4]  268 	inc	l
   00CB 2C            [ 4]  269 	inc	l
   00CC 2C            [ 4]  270 	inc	l
   00CD 2C            [ 4]  271 	inc	l
                            272 ;src/main.c:83: y = y + 2;
   00CE 50            [ 4]  273 	ld	d, b
   00CF 14            [ 4]  274 	inc	d
   00D0 14            [ 4]  275 	inc	d
                            276 ;src/main.c:81: if (c->dir<32){
   00D1 7B            [ 4]  277 	ld	a, e
   00D2 D6 20         [ 7]  278 	sub	a, #0x20
   00D4 30 04         [12]  279 	jr	NC,00120$
                            280 ;src/main.c:82: x = x + 4;
   00D6 4D            [ 4]  281 	ld	c, l
                            282 ;src/main.c:83: y = y + 2;
   00D7 42            [ 4]  283 	ld	b, d
   00D8 18 30         [12]  284 	jr	00121$
   00DA                     285 00120$:
                            286 ;src/main.c:84: } else if (c->dir<64){
   00DA 7B            [ 4]  287 	ld	a, e
   00DB D6 40         [ 7]  288 	sub	a, #0x40
   00DD 30 03         [12]  289 	jr	NC,00117$
                            290 ;src/main.c:85: x = x + 4;
   00DF 4D            [ 4]  291 	ld	c, l
                            292 ;src/main.c:86: y = y;
   00E0 18 28         [12]  293 	jr	00121$
   00E2                     294 00117$:
                            295 ;src/main.c:88: x = x + 2;
   00E2 61            [ 4]  296 	ld	h, c
   00E3 24            [ 4]  297 	inc	h
   00E4 24            [ 4]  298 	inc	h
                            299 ;src/main.c:87: } else if (c->dir<96){
   00E5 7B            [ 4]  300 	ld	a, e
   00E6 D6 60         [ 7]  301 	sub	a, #0x60
   00E8 30 03         [12]  302 	jr	NC,00114$
                            303 ;src/main.c:88: x = x + 2;
   00EA 4C            [ 4]  304 	ld	c, h
                            305 ;src/main.c:89: y = y;
   00EB 18 1D         [12]  306 	jr	00121$
   00ED                     307 00114$:
                            308 ;src/main.c:90: } else if (c->dir<128){
                            309 ;src/main.c:93: } else if (c->dir<160){
   00ED 7B            [ 4]  310 	ld	a,e
   00EE FE 80         [ 7]  311 	cp	a,#0x80
   00F0 38 18         [12]  312 	jr	C,00121$
   00F2 D6 A0         [ 7]  313 	sub	a, #0xa0
   00F4 30 03         [12]  314 	jr	NC,00108$
                            315 ;src/main.c:95: y = y+2;
   00F6 42            [ 4]  316 	ld	b, d
   00F7 18 11         [12]  317 	jr	00121$
   00F9                     318 00108$:
                            319 ;src/main.c:98: y = y+4;
   00F9 04            [ 4]  320 	inc	b
   00FA 04            [ 4]  321 	inc	b
   00FB 04            [ 4]  322 	inc	b
   00FC 04            [ 4]  323 	inc	b
                            324 ;src/main.c:96: } else if (c->dir<196){
                            325 ;src/main.c:98: y = y+4;
                            326 ;src/main.c:99: } else if (c->dir<228){
   00FD 7B            [ 4]  327 	ld	a,e
   00FE FE C4         [ 7]  328 	cp	a,#0xc4
   0100 38 08         [12]  329 	jr	C,00121$
   0102 D6 E4         [ 7]  330 	sub	a, #0xe4
   0104 30 03         [12]  331 	jr	NC,00102$
                            332 ;src/main.c:100: x = x+2;
   0106 4C            [ 4]  333 	ld	c, h
                            334 ;src/main.c:101: y = y+4;
   0107 18 01         [12]  335 	jr	00121$
   0109                     336 00102$:
                            337 ;src/main.c:103: x = x+4;
   0109 4D            [ 4]  338 	ld	c, l
                            339 ;src/main.c:104: y = y+4;
   010A                     340 00121$:
                            341 ;src/main.c:106: pvmem = cpct_getScreenPtr(CPCT_VMEM_START, x, y);
   010A C5            [11]  342 	push	bc
   010B 21 00 C0      [10]  343 	ld	hl, #0xc000
   010E E5            [11]  344 	push	hl
   010F CDr00r00      [17]  345 	call	_cpct_getScreenPtr
                            346 ;src/main.c:107: cpct_drawSolidBox (pvmem, cpct_px2byteM0 (14, 14), 2, 2);
   0112 E5            [11]  347 	push	hl
   0113 21 0E 0E      [10]  348 	ld	hl, #0x0e0e
   0116 E5            [11]  349 	push	hl
   0117 CDr00r00      [17]  350 	call	_cpct_px2byteM0
   011A 55            [ 4]  351 	ld	d, l
   011B C1            [10]  352 	pop	bc
   011C 21 02 02      [10]  353 	ld	hl, #0x0202
   011F E5            [11]  354 	push	hl
   0120 D5            [11]  355 	push	de
   0121 33            [ 6]  356 	inc	sp
   0122 C5            [11]  357 	push	bc
   0123 CDr00r00      [17]  358 	call	_cpct_drawSolidBox
   0126 F1            [10]  359 	pop	af
   0127 F1            [10]  360 	pop	af
   0128 33            [ 6]  361 	inc	sp
   0129 33            [ 6]  362 	inc	sp
   012A DD E1         [14]  363 	pop	ix
   012C C9            [10]  364 	ret
                            365 ;src/main.c:110: void printWayPoints(){
                            366 ;	---------------------------------
                            367 ; Function printWayPoints
                            368 ; ---------------------------------
   012D                     369 _printWayPoints::
   012D DD E5         [15]  370 	push	ix
   012F DD 21 00 00   [14]  371 	ld	ix,#0
   0133 DD 39         [15]  372 	add	ix,sp
   0135 3B            [ 6]  373 	dec	sp
                            374 ;src/main.c:113: for (i=0; i<4; i++){
   0136 DD 36 FF 00   [19]  375 	ld	-1 (ix), #0x00
   013A                     376 00102$:
                            377 ;src/main.c:114: pvmem = cpct_getScreenPtr(CPCT_VMEM_START, wp[i].x, wp[i].y);
   013A DD 6E FF      [19]  378 	ld	l, -1 (ix)
   013D 26 00         [ 7]  379 	ld	h, #0x00
   013F 29            [11]  380 	add	hl, hl
   0140 01r2Cr00      [10]  381 	ld	bc,#_wp
   0143 09            [11]  382 	add	hl,bc
   0144 4D            [ 4]  383 	ld	c,l
   0145 44            [ 4]  384 	ld	b,h
   0146 23            [ 6]  385 	inc	hl
   0147 56            [ 7]  386 	ld	d, (hl)
   0148 0A            [ 7]  387 	ld	a, (bc)
   0149 5F            [ 4]  388 	ld	e,a
   014A D5            [11]  389 	push	de
   014B 21 00 C0      [10]  390 	ld	hl, #0xc000
   014E E5            [11]  391 	push	hl
   014F CDr00r00      [17]  392 	call	_cpct_getScreenPtr
                            393 ;src/main.c:115: cpct_drawSolidBox (pvmem, cpct_px2byteM0 (WP_COLOR, WP_COLOR), WP_WIDTH, WP_HEIGHT);
   0152 E5            [11]  394 	push	hl
   0153 21 01 01      [10]  395 	ld	hl, #0x0101
   0156 E5            [11]  396 	push	hl
   0157 CDr00r00      [17]  397 	call	_cpct_px2byteM0
   015A 55            [ 4]  398 	ld	d, l
   015B C1            [10]  399 	pop	bc
   015C 21 02 04      [10]  400 	ld	hl, #0x0402
   015F E5            [11]  401 	push	hl
   0160 D5            [11]  402 	push	de
   0161 33            [ 6]  403 	inc	sp
   0162 C5            [11]  404 	push	bc
   0163 CDr00r00      [17]  405 	call	_cpct_drawSolidBox
   0166 F1            [10]  406 	pop	af
   0167 F1            [10]  407 	pop	af
   0168 33            [ 6]  408 	inc	sp
                            409 ;src/main.c:113: for (i=0; i<4; i++){
   0169 DD 34 FF      [23]  410 	inc	-1 (ix)
   016C DD 7E FF      [19]  411 	ld	a, -1 (ix)
   016F D6 04         [ 7]  412 	sub	a, #0x04
   0171 38 C7         [12]  413 	jr	C,00102$
   0173 33            [ 6]  414 	inc	sp
   0174 DD E1         [14]  415 	pop	ix
   0176 C9            [10]  416 	ret
                            417 ;src/main.c:119: void eraseDebugInfo(){
                            418 ;	---------------------------------
                            419 ; Function eraseDebugInfo
                            420 ; ---------------------------------
   0177                     421 _eraseDebugInfo::
                            422 ;src/main.c:121: pvmem = cpct_getScreenPtr(CPCT_VMEM_START, 50, 0);
   0177 21 32 00      [10]  423 	ld	hl, #0x0032
   017A E5            [11]  424 	push	hl
   017B 21 00 C0      [10]  425 	ld	hl, #0xc000
   017E E5            [11]  426 	push	hl
   017F CDr00r00      [17]  427 	call	_cpct_getScreenPtr
                            428 ;src/main.c:122: cpct_drawSolidBox (pvmem, cpct_px2byteM0 (0, 0), 29, 64);    
   0182 E5            [11]  429 	push	hl
   0183 21 00 00      [10]  430 	ld	hl, #0x0000
   0186 E5            [11]  431 	push	hl
   0187 CDr00r00      [17]  432 	call	_cpct_px2byteM0
   018A 55            [ 4]  433 	ld	d, l
   018B C1            [10]  434 	pop	bc
   018C 21 1D 40      [10]  435 	ld	hl, #0x401d
   018F E5            [11]  436 	push	hl
   0190 D5            [11]  437 	push	de
   0191 33            [ 6]  438 	inc	sp
   0192 C5            [11]  439 	push	bc
   0193 CDr00r00      [17]  440 	call	_cpct_drawSolidBox
   0196 F1            [10]  441 	pop	af
   0197 F1            [10]  442 	pop	af
   0198 33            [ 6]  443 	inc	sp
   0199 C9            [10]  444 	ret
                            445 ;src/main.c:125: void printDebugInfo(TCharacter *c){
                            446 ;	---------------------------------
                            447 ; Function printDebugInfo
                            448 ; ---------------------------------
   019A                     449 _printDebugInfo::
   019A DD E5         [15]  450 	push	ix
   019C DD 21 00 00   [14]  451 	ld	ix,#0
   01A0 DD 39         [15]  452 	add	ix,sp
   01A2 21 E8 FF      [10]  453 	ld	hl, #-24
   01A5 39            [11]  454 	add	hl, sp
   01A6 F9            [ 6]  455 	ld	sp, hl
                            456 ;src/main.c:128: sprintf(auxTxt, "X %1d", c->x);
   01A7 DD 7E 04      [19]  457 	ld	a, 4 (ix)
   01AA DD 77 FE      [19]  458 	ld	-2 (ix), a
   01AD DD 7E 05      [19]  459 	ld	a, 5 (ix)
   01B0 DD 77 FF      [19]  460 	ld	-1 (ix), a
   01B3 DD 6E FE      [19]  461 	ld	l,-2 (ix)
   01B6 DD 66 FF      [19]  462 	ld	h,-1 (ix)
   01B9 5E            [ 7]  463 	ld	e, (hl)
   01BA 23            [ 6]  464 	inc	hl
   01BB 56            [ 7]  465 	ld	d, (hl)
   01BC 21 00 00      [10]  466 	ld	hl, #0x0000
   01BF 39            [11]  467 	add	hl, sp
   01C0 E5            [11]  468 	push	hl
   01C1 D5            [11]  469 	push	de
   01C2 11r46r03      [10]  470 	ld	de, #___str_0
   01C5 D5            [11]  471 	push	de
   01C6 E5            [11]  472 	push	hl
   01C7 CDr00r00      [17]  473 	call	_sprintf
   01CA 21 06 00      [10]  474 	ld	hl, #6
   01CD 39            [11]  475 	add	hl, sp
   01CE F9            [ 6]  476 	ld	sp, hl
   01CF C1            [10]  477 	pop	bc
                            478 ;src/main.c:129: drawText(auxTxt, 50, 0, COLORTXT_BLUE, NORMALHEIGHT, TRANSPARENT);
   01D0 59            [ 4]  479 	ld	e, c
   01D1 50            [ 4]  480 	ld	d, b
   01D2 C5            [11]  481 	push	bc
   01D3 21 01 01      [10]  482 	ld	hl, #0x0101
   01D6 E5            [11]  483 	push	hl
   01D7 21 00 03      [10]  484 	ld	hl, #0x0300
   01DA E5            [11]  485 	push	hl
   01DB 3E 32         [ 7]  486 	ld	a, #0x32
   01DD F5            [11]  487 	push	af
   01DE 33            [ 6]  488 	inc	sp
   01DF D5            [11]  489 	push	de
   01E0 CDr00r00      [17]  490 	call	_drawText
   01E3 21 07 00      [10]  491 	ld	hl, #7
   01E6 39            [11]  492 	add	hl, sp
   01E7 F9            [ 6]  493 	ld	sp, hl
   01E8 C1            [10]  494 	pop	bc
                            495 ;src/main.c:130: sprintf(auxTxt, "Y %1d", c->y);
   01E9 DD 6E FE      [19]  496 	ld	l,-2 (ix)
   01EC DD 66 FF      [19]  497 	ld	h,-1 (ix)
   01EF 23            [ 6]  498 	inc	hl
   01F0 23            [ 6]  499 	inc	hl
   01F1 5E            [ 7]  500 	ld	e, (hl)
   01F2 23            [ 6]  501 	inc	hl
   01F3 56            [ 7]  502 	ld	d, (hl)
   01F4 69            [ 4]  503 	ld	l, c
   01F5 60            [ 4]  504 	ld	h, b
   01F6 C5            [11]  505 	push	bc
   01F7 D5            [11]  506 	push	de
   01F8 11r4Cr03      [10]  507 	ld	de, #___str_1
   01FB D5            [11]  508 	push	de
   01FC E5            [11]  509 	push	hl
   01FD CDr00r00      [17]  510 	call	_sprintf
   0200 21 06 00      [10]  511 	ld	hl, #6
   0203 39            [11]  512 	add	hl, sp
   0204 F9            [ 6]  513 	ld	sp, hl
   0205 C1            [10]  514 	pop	bc
                            515 ;src/main.c:131: drawText(auxTxt, 50, 8, COLORTXT_BLUE, NORMALHEIGHT, TRANSPARENT);  
   0206 59            [ 4]  516 	ld	e, c
   0207 50            [ 4]  517 	ld	d, b
   0208 C5            [11]  518 	push	bc
   0209 21 01 01      [10]  519 	ld	hl, #0x0101
   020C E5            [11]  520 	push	hl
   020D 21 08 03      [10]  521 	ld	hl, #0x0308
   0210 E5            [11]  522 	push	hl
   0211 3E 32         [ 7]  523 	ld	a, #0x32
   0213 F5            [11]  524 	push	af
   0214 33            [ 6]  525 	inc	sp
   0215 D5            [11]  526 	push	de
   0216 CDr00r00      [17]  527 	call	_drawText
   0219 21 07 00      [10]  528 	ld	hl, #7
   021C 39            [11]  529 	add	hl, sp
   021D F9            [ 6]  530 	ld	sp, hl
   021E C1            [10]  531 	pop	bc
                            532 ;src/main.c:132: sprintf(auxTxt, "DIR %1d", c->dir);
   021F DD 6E FE      [19]  533 	ld	l,-2 (ix)
   0222 DD 66 FF      [19]  534 	ld	h,-1 (ix)
   0225 11 0E 00      [10]  535 	ld	de, #0x000e
   0228 19            [11]  536 	add	hl, de
   0229 5E            [ 7]  537 	ld	e, (hl)
   022A 16 00         [ 7]  538 	ld	d, #0x00
   022C 69            [ 4]  539 	ld	l, c
   022D 60            [ 4]  540 	ld	h, b
   022E C5            [11]  541 	push	bc
   022F D5            [11]  542 	push	de
   0230 11r52r03      [10]  543 	ld	de, #___str_2
   0233 D5            [11]  544 	push	de
   0234 E5            [11]  545 	push	hl
   0235 CDr00r00      [17]  546 	call	_sprintf
   0238 21 06 00      [10]  547 	ld	hl, #6
   023B 39            [11]  548 	add	hl, sp
   023C F9            [ 6]  549 	ld	sp, hl
   023D C1            [10]  550 	pop	bc
                            551 ;src/main.c:133: drawText(auxTxt, 50, 16, COLORTXT_BLUE, NORMALHEIGHT, TRANSPARENT);  
   023E 59            [ 4]  552 	ld	e, c
   023F 50            [ 4]  553 	ld	d, b
   0240 C5            [11]  554 	push	bc
   0241 21 01 01      [10]  555 	ld	hl, #0x0101
   0244 E5            [11]  556 	push	hl
   0245 21 10 03      [10]  557 	ld	hl, #0x0310
   0248 E5            [11]  558 	push	hl
   0249 3E 32         [ 7]  559 	ld	a, #0x32
   024B F5            [11]  560 	push	af
   024C 33            [ 6]  561 	inc	sp
   024D D5            [11]  562 	push	de
   024E CDr00r00      [17]  563 	call	_drawText
   0251 21 07 00      [10]  564 	ld	hl, #7
   0254 39            [11]  565 	add	hl, sp
   0255 F9            [ 6]  566 	ld	sp, hl
   0256 C1            [10]  567 	pop	bc
                            568 ;src/main.c:134: sprintf(auxTxt, "ACC %1d", c->a);
   0257 DD 6E FE      [19]  569 	ld	l,-2 (ix)
   025A DD 66 FF      [19]  570 	ld	h,-1 (ix)
   025D 11 0C 00      [10]  571 	ld	de, #0x000c
   0260 19            [11]  572 	add	hl, de
   0261 5E            [ 7]  573 	ld	e, (hl)
   0262 23            [ 6]  574 	inc	hl
   0263 56            [ 7]  575 	ld	d, (hl)
   0264 69            [ 4]  576 	ld	l, c
   0265 60            [ 4]  577 	ld	h, b
   0266 C5            [11]  578 	push	bc
   0267 D5            [11]  579 	push	de
   0268 11r5Ar03      [10]  580 	ld	de, #___str_3
   026B D5            [11]  581 	push	de
   026C E5            [11]  582 	push	hl
   026D CDr00r00      [17]  583 	call	_sprintf
   0270 21 06 00      [10]  584 	ld	hl, #6
   0273 39            [11]  585 	add	hl, sp
   0274 F9            [ 6]  586 	ld	sp, hl
   0275 C1            [10]  587 	pop	bc
                            588 ;src/main.c:135: drawText(auxTxt, 50, 24, COLORTXT_BLUE, NORMALHEIGHT, TRANSPARENT);
   0276 59            [ 4]  589 	ld	e, c
   0277 50            [ 4]  590 	ld	d, b
   0278 C5            [11]  591 	push	bc
   0279 21 01 01      [10]  592 	ld	hl, #0x0101
   027C E5            [11]  593 	push	hl
   027D 21 18 03      [10]  594 	ld	hl, #0x0318
   0280 E5            [11]  595 	push	hl
   0281 3E 32         [ 7]  596 	ld	a, #0x32
   0283 F5            [11]  597 	push	af
   0284 33            [ 6]  598 	inc	sp
   0285 D5            [11]  599 	push	de
   0286 CDr00r00      [17]  600 	call	_drawText
   0289 21 07 00      [10]  601 	ld	hl, #7
   028C 39            [11]  602 	add	hl, sp
   028D F9            [ 6]  603 	ld	sp, hl
   028E C1            [10]  604 	pop	bc
                            605 ;src/main.c:136: sprintf(auxTxt, "VX %1d", c->vx);
   028F DD 7E FE      [19]  606 	ld	a, -2 (ix)
   0292 C6 08         [ 7]  607 	add	a, #0x08
   0294 DD 77 FC      [19]  608 	ld	-4 (ix), a
   0297 DD 7E FF      [19]  609 	ld	a, -1 (ix)
   029A CE 00         [ 7]  610 	adc	a, #0x00
   029C DD 77 FD      [19]  611 	ld	-3 (ix), a
   029F DD 6E FC      [19]  612 	ld	l,-4 (ix)
   02A2 DD 66 FD      [19]  613 	ld	h,-3 (ix)
   02A5 5E            [ 7]  614 	ld	e, (hl)
   02A6 23            [ 6]  615 	inc	hl
   02A7 56            [ 7]  616 	ld	d, (hl)
   02A8 69            [ 4]  617 	ld	l, c
   02A9 60            [ 4]  618 	ld	h, b
   02AA C5            [11]  619 	push	bc
   02AB D5            [11]  620 	push	de
   02AC 11r62r03      [10]  621 	ld	de, #___str_4
   02AF D5            [11]  622 	push	de
   02B0 E5            [11]  623 	push	hl
   02B1 CDr00r00      [17]  624 	call	_sprintf
   02B4 21 06 00      [10]  625 	ld	hl, #6
   02B7 39            [11]  626 	add	hl, sp
   02B8 F9            [ 6]  627 	ld	sp, hl
   02B9 C1            [10]  628 	pop	bc
                            629 ;src/main.c:137: drawText(auxTxt, 50, 32, COLORTXT_BLUE, NORMALHEIGHT, TRANSPARENT);
   02BA 59            [ 4]  630 	ld	e, c
   02BB 50            [ 4]  631 	ld	d, b
   02BC C5            [11]  632 	push	bc
   02BD 21 01 01      [10]  633 	ld	hl, #0x0101
   02C0 E5            [11]  634 	push	hl
   02C1 21 20 03      [10]  635 	ld	hl, #0x0320
   02C4 E5            [11]  636 	push	hl
   02C5 3E 32         [ 7]  637 	ld	a, #0x32
   02C7 F5            [11]  638 	push	af
   02C8 33            [ 6]  639 	inc	sp
   02C9 D5            [11]  640 	push	de
   02CA CDr00r00      [17]  641 	call	_drawText
   02CD 21 07 00      [10]  642 	ld	hl, #7
   02D0 39            [11]  643 	add	hl, sp
   02D1 F9            [ 6]  644 	ld	sp, hl
   02D2 C1            [10]  645 	pop	bc
                            646 ;src/main.c:138: sprintf(auxTxt, "VY %1d", c->vx);
   02D3 DD 6E FC      [19]  647 	ld	l,-4 (ix)
   02D6 DD 66 FD      [19]  648 	ld	h,-3 (ix)
   02D9 5E            [ 7]  649 	ld	e, (hl)
   02DA 23            [ 6]  650 	inc	hl
   02DB 56            [ 7]  651 	ld	d, (hl)
   02DC 69            [ 4]  652 	ld	l, c
   02DD 60            [ 4]  653 	ld	h, b
   02DE C5            [11]  654 	push	bc
   02DF D5            [11]  655 	push	de
   02E0 11r69r03      [10]  656 	ld	de, #___str_5
   02E3 D5            [11]  657 	push	de
   02E4 E5            [11]  658 	push	hl
   02E5 CDr00r00      [17]  659 	call	_sprintf
   02E8 21 06 00      [10]  660 	ld	hl, #6
   02EB 39            [11]  661 	add	hl, sp
   02EC F9            [ 6]  662 	ld	sp, hl
   02ED C1            [10]  663 	pop	bc
                            664 ;src/main.c:139: drawText(auxTxt, 50, 40, COLORTXT_BLUE, NORMALHEIGHT, TRANSPARENT);
   02EE 59            [ 4]  665 	ld	e, c
   02EF 50            [ 4]  666 	ld	d, b
   02F0 C5            [11]  667 	push	bc
   02F1 21 01 01      [10]  668 	ld	hl, #0x0101
   02F4 E5            [11]  669 	push	hl
   02F5 21 28 03      [10]  670 	ld	hl, #0x0328
   02F8 E5            [11]  671 	push	hl
   02F9 3E 32         [ 7]  672 	ld	a, #0x32
   02FB F5            [11]  673 	push	af
   02FC 33            [ 6]  674 	inc	sp
   02FD D5            [11]  675 	push	de
   02FE CDr00r00      [17]  676 	call	_drawText
   0301 21 07 00      [10]  677 	ld	hl, #7
   0304 39            [11]  678 	add	hl, sp
   0305 F9            [ 6]  679 	ld	sp, hl
   0306 C1            [10]  680 	pop	bc
                            681 ;src/main.c:140: sprintf(auxTxt, "T %1d", c->target);
   0307 DD 6E FE      [19]  682 	ld	l,-2 (ix)
   030A DD 66 FF      [19]  683 	ld	h,-1 (ix)
   030D 11 10 00      [10]  684 	ld	de, #0x0010
   0310 19            [11]  685 	add	hl, de
   0311 5E            [ 7]  686 	ld	e, (hl)
   0312 16 00         [ 7]  687 	ld	d, #0x00
   0314 69            [ 4]  688 	ld	l, c
   0315 60            [ 4]  689 	ld	h, b
   0316 C5            [11]  690 	push	bc
   0317 D5            [11]  691 	push	de
   0318 11r70r03      [10]  692 	ld	de, #___str_6
   031B D5            [11]  693 	push	de
   031C E5            [11]  694 	push	hl
   031D CDr00r00      [17]  695 	call	_sprintf
   0320 21 06 00      [10]  696 	ld	hl, #6
   0323 39            [11]  697 	add	hl, sp
   0324 F9            [ 6]  698 	ld	sp, hl
   0325 C1            [10]  699 	pop	bc
                            700 ;src/main.c:141: drawText(auxTxt, 50, 48, COLORTXT_BLUE, NORMALHEIGHT, TRANSPARENT);
   0326 21 01 01      [10]  701 	ld	hl, #0x0101
   0329 E5            [11]  702 	push	hl
   032A 21 30 03      [10]  703 	ld	hl, #0x0330
   032D E5            [11]  704 	push	hl
   032E 3E 32         [ 7]  705 	ld	a, #0x32
   0330 F5            [11]  706 	push	af
   0331 33            [ 6]  707 	inc	sp
   0332 C5            [11]  708 	push	bc
   0333 CDr00r00      [17]  709 	call	_drawText
   0336 21 07 00      [10]  710 	ld	hl, #7
   0339 39            [11]  711 	add	hl, sp
   033A F9            [ 6]  712 	ld	sp, hl
                            713 ;src/main.c:142: wait4OneKey();
   033B CDr00r00      [17]  714 	call	_wait4OneKey
                            715 ;src/main.c:143: eraseDebugInfo();
   033E CDr77r01      [17]  716 	call	_eraseDebugInfo
   0341 DD F9         [10]  717 	ld	sp, ix
   0343 DD E1         [14]  718 	pop	ix
   0345 C9            [10]  719 	ret
   0346                     720 ___str_0:
   0346 58 20 25 31 64      721 	.ascii "X %1d"
   034B 00                  722 	.db 0x00
   034C                     723 ___str_1:
   034C 59 20 25 31 64      724 	.ascii "Y %1d"
   0351 00                  725 	.db 0x00
   0352                     726 ___str_2:
   0352 44 49 52 20 25 31   727 	.ascii "DIR %1d"
        64
   0359 00                  728 	.db 0x00
   035A                     729 ___str_3:
   035A 41 43 43 20 25 31   730 	.ascii "ACC %1d"
        64
   0361 00                  731 	.db 0x00
   0362                     732 ___str_4:
   0362 56 58 20 25 31 64   733 	.ascii "VX %1d"
   0368 00                  734 	.db 0x00
   0369                     735 ___str_5:
   0369 56 59 20 25 31 64   736 	.ascii "VY %1d"
   036F 00                  737 	.db 0x00
   0370                     738 ___str_6:
   0370 54 20 25 31 64      739 	.ascii "T %1d"
   0375 00                  740 	.db 0x00
                            741 ;src/main.c:146: void getCharacterInput(TCharacter *c){
                            742 ;	---------------------------------
                            743 ; Function getCharacterInput
                            744 ; ---------------------------------
   0376                     745 _getCharacterInput::
   0376 DD E5         [15]  746 	push	ix
   0378 DD 21 00 00   [14]  747 	ld	ix,#0
   037C DD 39         [15]  748 	add	ix,sp
   037E F5            [11]  749 	push	af
                            750 ;src/main.c:148: if (cpct_isKeyPressed(Key_O)){
   037F 21 04 04      [10]  751 	ld	hl, #0x0404
   0382 CDr00r00      [17]  752 	call	_cpct_isKeyPressed
                            753 ;src/main.c:149: c->dir = c->dir + 32;
   0385 DD 7E 04      [19]  754 	ld	a, 4 (ix)
   0388 DD 77 FE      [19]  755 	ld	-2 (ix), a
   038B DD 7E 05      [19]  756 	ld	a, 5 (ix)
   038E DD 77 FF      [19]  757 	ld	-1 (ix), a
   0391 DD 7E FE      [19]  758 	ld	a, -2 (ix)
   0394 C6 0E         [ 7]  759 	add	a, #0x0e
   0396 4F            [ 4]  760 	ld	c, a
   0397 DD 7E FF      [19]  761 	ld	a, -1 (ix)
   039A CE 00         [ 7]  762 	adc	a, #0x00
   039C 47            [ 4]  763 	ld	b, a
                            764 ;src/main.c:148: if (cpct_isKeyPressed(Key_O)){
   039D 7D            [ 4]  765 	ld	a, l
   039E B7            [ 4]  766 	or	a, a
   039F 28 04         [12]  767 	jr	Z,00102$
                            768 ;src/main.c:149: c->dir = c->dir + 32;
   03A1 0A            [ 7]  769 	ld	a, (bc)
   03A2 C6 20         [ 7]  770 	add	a, #0x20
   03A4 02            [ 7]  771 	ld	(bc), a
   03A5                     772 00102$:
                            773 ;src/main.c:151: if (cpct_isKeyPressed(Key_P)){
   03A5 C5            [11]  774 	push	bc
   03A6 21 03 08      [10]  775 	ld	hl, #0x0803
   03A9 CDr00r00      [17]  776 	call	_cpct_isKeyPressed
   03AC C1            [10]  777 	pop	bc
   03AD 7D            [ 4]  778 	ld	a, l
   03AE B7            [ 4]  779 	or	a, a
   03AF 28 04         [12]  780 	jr	Z,00104$
                            781 ;src/main.c:152: c->dir = c->dir - 32;
   03B1 0A            [ 7]  782 	ld	a, (bc)
   03B2 C6 E0         [ 7]  783 	add	a, #0xe0
   03B4 02            [ 7]  784 	ld	(bc), a
   03B5                     785 00104$:
                            786 ;src/main.c:154: if (cpct_isKeyPressed(Key_Q)){
   03B5 21 08 08      [10]  787 	ld	hl, #0x0808
   03B8 CDr00r00      [17]  788 	call	_cpct_isKeyPressed
                            789 ;src/main.c:164: c->a = 0;
   03BB DD 7E FE      [19]  790 	ld	a, -2 (ix)
   03BE C6 0C         [ 7]  791 	add	a, #0x0c
   03C0 4F            [ 4]  792 	ld	c, a
   03C1 DD 7E FF      [19]  793 	ld	a, -1 (ix)
   03C4 CE 00         [ 7]  794 	adc	a, #0x00
   03C6 47            [ 4]  795 	ld	b, a
                            796 ;src/main.c:154: if (cpct_isKeyPressed(Key_Q)){
   03C7 7D            [ 4]  797 	ld	a, l
   03C8 B7            [ 4]  798 	or	a, a
   03C9 28 0B         [12]  799 	jr	Z,00106$
                            800 ;src/main.c:155: c->a = c->a + 1;
   03CB 69            [ 4]  801 	ld	l, c
   03CC 60            [ 4]  802 	ld	h, b
   03CD 5E            [ 7]  803 	ld	e, (hl)
   03CE 23            [ 6]  804 	inc	hl
   03CF 56            [ 7]  805 	ld	d, (hl)
   03D0 13            [ 6]  806 	inc	de
   03D1 69            [ 4]  807 	ld	l, c
   03D2 60            [ 4]  808 	ld	h, b
   03D3 73            [ 7]  809 	ld	(hl), e
   03D4 23            [ 6]  810 	inc	hl
   03D5 72            [ 7]  811 	ld	(hl), d
   03D6                     812 00106$:
                            813 ;src/main.c:157: if ((cpct_isKeyPressed(Key_A)) && (c->a > 0)){
   03D6 C5            [11]  814 	push	bc
   03D7 21 08 20      [10]  815 	ld	hl, #0x2008
   03DA CDr00r00      [17]  816 	call	_cpct_isKeyPressed
   03DD C1            [10]  817 	pop	bc
   03DE 7D            [ 4]  818 	ld	a, l
   03DF B7            [ 4]  819 	or	a, a
   03E0 28 16         [12]  820 	jr	Z,00108$
   03E2 69            [ 4]  821 	ld	l, c
   03E3 60            [ 4]  822 	ld	h, b
   03E4 5E            [ 7]  823 	ld	e, (hl)
   03E5 23            [ 6]  824 	inc	hl
   03E6 56            [ 7]  825 	ld	d, (hl)
   03E7 AF            [ 4]  826 	xor	a, a
   03E8 BB            [ 4]  827 	cp	a, e
   03E9 9A            [ 4]  828 	sbc	a, d
   03EA E2rEFr03      [10]  829 	jp	PO, 00151$
   03ED EE 80         [ 7]  830 	xor	a, #0x80
   03EF                     831 00151$:
   03EF F2rF8r03      [10]  832 	jp	P, 00108$
                            833 ;src/main.c:158: c->a = c->a - 1;
   03F2 1B            [ 6]  834 	dec	de
   03F3 69            [ 4]  835 	ld	l, c
   03F4 60            [ 4]  836 	ld	h, b
   03F5 73            [ 7]  837 	ld	(hl), e
   03F6 23            [ 6]  838 	inc	hl
   03F7 72            [ 7]  839 	ld	(hl), d
   03F8                     840 00108$:
                            841 ;src/main.c:161: if (cpct_isKeyPressed(Key_Space)){
   03F8 C5            [11]  842 	push	bc
   03F9 21 05 80      [10]  843 	ld	hl, #0x8005
   03FC CDr00r00      [17]  844 	call	_cpct_isKeyPressed
   03FF C1            [10]  845 	pop	bc
   0400 7D            [ 4]  846 	ld	a, l
   0401 B7            [ 4]  847 	or	a, a
   0402 28 24         [12]  848 	jr	Z,00114$
                            849 ;src/main.c:162: if (c->motion){
   0404 DD 7E FE      [19]  850 	ld	a, -2 (ix)
   0407 C6 0F         [ 7]  851 	add	a, #0x0f
   0409 6F            [ 4]  852 	ld	l, a
   040A DD 7E FF      [19]  853 	ld	a, -1 (ix)
   040D CE 00         [ 7]  854 	adc	a, #0x00
   040F 67            [ 4]  855 	ld	h, a
   0410 7E            [ 7]  856 	ld	a, (hl)
   0411 B7            [ 4]  857 	or	a, a
   0412 28 0B         [12]  858 	jr	Z,00111$
                            859 ;src/main.c:163: c->motion = 0;
   0414 36 00         [10]  860 	ld	(hl), #0x00
                            861 ;src/main.c:164: c->a = 0;
   0416 3E 00         [ 7]  862 	ld	a, #0x00
   0418 02            [ 7]  863 	ld	(bc), a
   0419 03            [ 6]  864 	inc	bc
   041A 3E 00         [ 7]  865 	ld	a, #0x00
   041C 02            [ 7]  866 	ld	(bc), a
   041D 18 09         [12]  867 	jr	00114$
   041F                     868 00111$:
                            869 ;src/main.c:166: c->motion = 1;
   041F 36 01         [10]  870 	ld	(hl), #0x01
                            871 ;src/main.c:167: c->a = 2;
   0421 3E 02         [ 7]  872 	ld	a, #0x02
   0423 02            [ 7]  873 	ld	(bc), a
   0424 03            [ 6]  874 	inc	bc
   0425 3E 00         [ 7]  875 	ld	a, #0x00
   0427 02            [ 7]  876 	ld	(bc), a
   0428                     877 00114$:
                            878 ;src/main.c:171: if (cpct_isKeyPressed(Key_D)){
   0428 21 07 20      [10]  879 	ld	hl, #0x2007
   042B CDr00r00      [17]  880 	call	_cpct_isKeyPressed
   042E 7D            [ 4]  881 	ld	a, l
   042F B7            [ 4]  882 	or	a, a
   0430 28 0B         [12]  883 	jr	Z,00117$
                            884 ;src/main.c:172: printDebugInfo(c);
   0432 DD 6E 04      [19]  885 	ld	l,4 (ix)
   0435 DD 66 05      [19]  886 	ld	h,5 (ix)
   0438 E5            [11]  887 	push	hl
   0439 CDr9Ar01      [17]  888 	call	_printDebugInfo
   043C F1            [10]  889 	pop	af
   043D                     890 00117$:
   043D DD F9         [10]  891 	ld	sp, ix
   043F DD E1         [14]  892 	pop	ix
   0441 C9            [10]  893 	ret
                            894 ;src/main.c:177: void motionUpdate(TCharacter *c){
                            895 ;	---------------------------------
                            896 ; Function motionUpdate
                            897 ; ---------------------------------
   0442                     898 _motionUpdate::
   0442 DD E5         [15]  899 	push	ix
   0444 DD 21 00 00   [14]  900 	ld	ix,#0
   0448 DD 39         [15]  901 	add	ix,sp
   044A F5            [11]  902 	push	af
   044B F5            [11]  903 	push	af
   044C 3B            [ 6]  904 	dec	sp
                            905 ;src/main.c:182: xc = c->x >> 8;
   044D DD 7E 04      [19]  906 	ld	a, 4 (ix)
   0450 DD 77 FE      [19]  907 	ld	-2 (ix), a
   0453 DD 7E 05      [19]  908 	ld	a, 5 (ix)
   0456 DD 77 FF      [19]  909 	ld	-1 (ix), a
   0459 DD 6E FE      [19]  910 	ld	l,-2 (ix)
   045C DD 66 FF      [19]  911 	ld	h,-1 (ix)
   045F 4E            [ 7]  912 	ld	c, (hl)
   0460 23            [ 6]  913 	inc	hl
   0461 4E            [ 7]  914 	ld	c, (hl)
                            915 ;src/main.c:183: yc = c->y >> 8;
   0462 DD 6E FE      [19]  916 	ld	l,-2 (ix)
   0465 DD 66 FF      [19]  917 	ld	h,-1 (ix)
   0468 23            [ 6]  918 	inc	hl
   0469 23            [ 6]  919 	inc	hl
   046A 46            [ 7]  920 	ld	b, (hl)
   046B 23            [ 6]  921 	inc	hl
   046C 46            [ 7]  922 	ld	b, (hl)
                            923 ;src/main.c:186: if (abs((xc - wp[c->target].x) < 2) && (abs((yc - wp[c->target].y) < 2))){
   046D DD 71 FC      [19]  924 	ld	-4 (ix), c
   0470 DD 36 FD 00   [19]  925 	ld	-3 (ix), #0x00
   0474 DD 7E FE      [19]  926 	ld	a, -2 (ix)
   0477 C6 10         [ 7]  927 	add	a, #0x10
   0479 5F            [ 4]  928 	ld	e, a
   047A DD 7E FF      [19]  929 	ld	a, -1 (ix)
   047D CE 00         [ 7]  930 	adc	a, #0x00
   047F 57            [ 4]  931 	ld	d, a
   0480 1A            [ 7]  932 	ld	a, (de)
   0481 6F            [ 4]  933 	ld	l, a
   0482 26 00         [ 7]  934 	ld	h, #0x00
   0484 29            [11]  935 	add	hl, hl
   0485 3Er2C         [ 7]  936 	ld	a, #<(_wp)
   0487 85            [ 4]  937 	add	a, l
   0488 6F            [ 4]  938 	ld	l, a
   0489 3Es00         [ 7]  939 	ld	a, #>(_wp)
   048B 8C            [ 4]  940 	adc	a, h
   048C 67            [ 4]  941 	ld	h, a
   048D 6E            [ 7]  942 	ld	l, (hl)
   048E 26 00         [ 7]  943 	ld	h, #0x00
   0490 DD 7E FC      [19]  944 	ld	a, -4 (ix)
   0493 95            [ 4]  945 	sub	a, l
   0494 6F            [ 4]  946 	ld	l, a
   0495 DD 7E FD      [19]  947 	ld	a, -3 (ix)
   0498 9C            [ 4]  948 	sbc	a, h
   0499 67            [ 4]  949 	ld	h, a
   049A 7D            [ 4]  950 	ld	a, l
   049B D6 02         [ 7]  951 	sub	a, #0x02
   049D 7C            [ 4]  952 	ld	a, h
   049E 17            [ 4]  953 	rla
   049F 3F            [ 4]  954 	ccf
   04A0 1F            [ 4]  955 	rra
   04A1 DE 80         [ 7]  956 	sbc	a, #0x80
   04A3 3E 00         [ 7]  957 	ld	a, #0x00
   04A5 17            [ 4]  958 	rla
   04A6 6F            [ 4]  959 	ld	l, a
   04A7 26 00         [ 7]  960 	ld	h, #0x00
   04A9 D5            [11]  961 	push	de
   04AA E5            [11]  962 	push	hl
   04AB CDr00r00      [17]  963 	call	_abs
   04AE F1            [10]  964 	pop	af
   04AF D1            [10]  965 	pop	de
   04B0 7C            [ 4]  966 	ld	a, h
   04B1 B5            [ 4]  967 	or	a,l
   04B2 28 64         [12]  968 	jr	Z,00102$
   04B4 DD 70 FC      [19]  969 	ld	-4 (ix), b
   04B7 DD 36 FD 00   [19]  970 	ld	-3 (ix), #0x00
   04BB 1A            [ 7]  971 	ld	a, (de)
   04BC 6F            [ 4]  972 	ld	l, a
   04BD 26 00         [ 7]  973 	ld	h, #0x00
   04BF 29            [11]  974 	add	hl, hl
   04C0 3Er2C         [ 7]  975 	ld	a, #<(_wp)
   04C2 85            [ 4]  976 	add	a, l
   04C3 6F            [ 4]  977 	ld	l, a
   04C4 3Es00         [ 7]  978 	ld	a, #>(_wp)
   04C6 8C            [ 4]  979 	adc	a, h
   04C7 67            [ 4]  980 	ld	h, a
   04C8 23            [ 6]  981 	inc	hl
   04C9 6E            [ 7]  982 	ld	l, (hl)
   04CA 26 00         [ 7]  983 	ld	h, #0x00
   04CC DD 7E FC      [19]  984 	ld	a, -4 (ix)
   04CF 95            [ 4]  985 	sub	a, l
   04D0 6F            [ 4]  986 	ld	l, a
   04D1 DD 7E FD      [19]  987 	ld	a, -3 (ix)
   04D4 9C            [ 4]  988 	sbc	a, h
   04D5 67            [ 4]  989 	ld	h, a
   04D6 7D            [ 4]  990 	ld	a, l
   04D7 D6 02         [ 7]  991 	sub	a, #0x02
   04D9 7C            [ 4]  992 	ld	a, h
   04DA 17            [ 4]  993 	rla
   04DB 3F            [ 4]  994 	ccf
   04DC 1F            [ 4]  995 	rra
   04DD DE 80         [ 7]  996 	sbc	a, #0x80
   04DF 3E 00         [ 7]  997 	ld	a, #0x00
   04E1 17            [ 4]  998 	rla
   04E2 6F            [ 4]  999 	ld	l, a
   04E3 26 00         [ 7] 1000 	ld	h, #0x00
   04E5 D5            [11] 1001 	push	de
   04E6 E5            [11] 1002 	push	hl
   04E7 CDr00r00      [17] 1003 	call	_abs
   04EA F1            [10] 1004 	pop	af
   04EB D1            [10] 1005 	pop	de
   04EC 7C            [ 4] 1006 	ld	a, h
   04ED B5            [ 4] 1007 	or	a,l
   04EE 28 28         [12] 1008 	jr	Z,00102$
                           1009 ;src/main.c:188: c->target = ((c->target+1) % WP_NUMBER);
   04F0 1A            [ 7] 1010 	ld	a, (de)
   04F1 6F            [ 4] 1011 	ld	l, a
   04F2 26 00         [ 7] 1012 	ld	h, #0x00
   04F4 23            [ 6] 1013 	inc	hl
   04F5 E5            [11] 1014 	push	hl
   04F6 FD E1         [14] 1015 	pop	iy
   04F8 C5            [11] 1016 	push	bc
   04F9 D5            [11] 1017 	push	de
   04FA 21 04 00      [10] 1018 	ld	hl, #0x0004
   04FD E5            [11] 1019 	push	hl
   04FE FD E5         [15] 1020 	push	iy
   0500 CDr00r00      [17] 1021 	call	__modsint
   0503 F1            [10] 1022 	pop	af
   0504 F1            [10] 1023 	pop	af
   0505 D1            [10] 1024 	pop	de
   0506 C1            [10] 1025 	pop	bc
   0507 7D            [ 4] 1026 	ld	a, l
   0508 12            [ 7] 1027 	ld	(de), a
                           1028 ;src/main.c:189: printDebugInfo(c);
   0509 C5            [11] 1029 	push	bc
   050A D5            [11] 1030 	push	de
   050B DD 6E FE      [19] 1031 	ld	l,-2 (ix)
   050E DD 66 FF      [19] 1032 	ld	h,-1 (ix)
   0511 E5            [11] 1033 	push	hl
   0512 CDr9Ar01      [17] 1034 	call	_printDebugInfo
   0515 F1            [10] 1035 	pop	af
   0516 D1            [10] 1036 	pop	de
   0517 C1            [10] 1037 	pop	bc
   0518                    1038 00102$:
                           1039 ;src/main.c:191: xwp = wp[c->target].x;
   0518 1A            [ 7] 1040 	ld	a, (de)
   0519 6F            [ 4] 1041 	ld	l, a
   051A 26 00         [ 7] 1042 	ld	h, #0x00
   051C 29            [11] 1043 	add	hl, hl
   051D 11r2Cr00      [10] 1044 	ld	de, #_wp
   0520 19            [11] 1045 	add	hl, de
   0521 7E            [ 7] 1046 	ld	a, (hl)
   0522 DD 77 FB      [19] 1047 	ld	-5 (ix), a
                           1048 ;src/main.c:192: ywp = wp[c->target].y;
   0525 23            [ 6] 1049 	inc	hl
   0526 66            [ 7] 1050 	ld	h, (hl)
                           1051 ;src/main.c:194: if (ywp < yc){
   0527 7C            [ 4] 1052 	ld	a, h
   0528 90            [ 4] 1053 	sub	a, b
   0529 3E 00         [ 7] 1054 	ld	a, #0x00
   052B 17            [ 4] 1055 	rla
   052C 6F            [ 4] 1056 	ld	l, a
                           1057 ;src/main.c:195: c->dir = 96;
   052D DD 7E FE      [19] 1058 	ld	a, -2 (ix)
   0530 C6 0E         [ 7] 1059 	add	a, #0x0e
   0532 5F            [ 4] 1060 	ld	e, a
   0533 DD 7E FF      [19] 1061 	ld	a, -1 (ix)
   0536 CE 00         [ 7] 1062 	adc	a, #0x00
   0538 57            [ 4] 1063 	ld	d, a
                           1064 ;src/main.c:196: } else if (ywp > yc){
   0539 78            [ 4] 1065 	ld	a, b
   053A 94            [ 4] 1066 	sub	a, h
   053B 3E 00         [ 7] 1067 	ld	a, #0x00
   053D 17            [ 4] 1068 	rla
   053E 47            [ 4] 1069 	ld	b, a
                           1070 ;src/main.c:193: if (xwp < xc){
   053F DD 7E FB      [19] 1071 	ld	a, -5 (ix)
   0542 91            [ 4] 1072 	sub	a, c
   0543 30 17         [12] 1073 	jr	NC,00123$
                           1074 ;src/main.c:194: if (ywp < yc){
   0545 7D            [ 4] 1075 	ld	a, l
   0546 B7            [ 4] 1076 	or	a, a
   0547 28 05         [12] 1077 	jr	Z,00108$
                           1078 ;src/main.c:195: c->dir = 96;
   0549 3E 60         [ 7] 1079 	ld	a, #0x60
   054B 12            [ 7] 1080 	ld	(de), a
   054C 18 36         [12] 1081 	jr	00125$
   054E                    1082 00108$:
                           1083 ;src/main.c:196: } else if (ywp > yc){
   054E 78            [ 4] 1084 	ld	a, b
   054F B7            [ 4] 1085 	or	a, a
   0550 28 05         [12] 1086 	jr	Z,00105$
                           1087 ;src/main.c:197: c->dir = 160;
   0552 3E A0         [ 7] 1088 	ld	a, #0xa0
   0554 12            [ 7] 1089 	ld	(de), a
   0555 18 2D         [12] 1090 	jr	00125$
   0557                    1091 00105$:
                           1092 ;src/main.c:199: c->dir = 128;
   0557 3E 80         [ 7] 1093 	ld	a, #0x80
   0559 12            [ 7] 1094 	ld	(de), a
   055A 18 28         [12] 1095 	jr	00125$
   055C                    1096 00123$:
                           1097 ;src/main.c:200: } else if (xwp > xc){
   055C 79            [ 4] 1098 	ld	a, c
   055D DD 96 FB      [19] 1099 	sub	a, -5 (ix)
   0560 30 16         [12] 1100 	jr	NC,00120$
                           1101 ;src/main.c:201: if (ywp < yc){
   0562 7D            [ 4] 1102 	ld	a, l
   0563 B7            [ 4] 1103 	or	a, a
   0564 28 05         [12] 1104 	jr	Z,00114$
                           1105 ;src/main.c:202: c->dir = 32;
   0566 3E 20         [ 7] 1106 	ld	a, #0x20
   0568 12            [ 7] 1107 	ld	(de), a
   0569 18 19         [12] 1108 	jr	00125$
   056B                    1109 00114$:
                           1110 ;src/main.c:203: } else if (ywp > yc){
   056B 78            [ 4] 1111 	ld	a, b
   056C B7            [ 4] 1112 	or	a, a
   056D 28 05         [12] 1113 	jr	Z,00111$
                           1114 ;src/main.c:204: c->dir = 224;
   056F 3E E0         [ 7] 1115 	ld	a, #0xe0
   0571 12            [ 7] 1116 	ld	(de), a
   0572 18 10         [12] 1117 	jr	00125$
   0574                    1118 00111$:
                           1119 ;src/main.c:206: c->dir = 0;
   0574 AF            [ 4] 1120 	xor	a, a
   0575 12            [ 7] 1121 	ld	(de), a
   0576 18 0C         [12] 1122 	jr	00125$
   0578                    1123 00120$:
                           1124 ;src/main.c:207: } else if (ywp < yc){
   0578 7D            [ 4] 1125 	ld	a, l
   0579 B7            [ 4] 1126 	or	a, a
   057A 28 05         [12] 1127 	jr	Z,00117$
                           1128 ;src/main.c:208: c->dir = 64;
   057C 3E 40         [ 7] 1129 	ld	a, #0x40
   057E 12            [ 7] 1130 	ld	(de), a
   057F 18 03         [12] 1131 	jr	00125$
   0581                    1132 00117$:
                           1133 ;src/main.c:210: c->dir = 192;
   0581 3E C0         [ 7] 1134 	ld	a, #0xc0
   0583 12            [ 7] 1135 	ld	(de), a
   0584                    1136 00125$:
   0584 DD F9         [10] 1137 	ld	sp, ix
   0586 DD E1         [14] 1138 	pop	ix
   0588 C9            [10] 1139 	ret
                           1140 ;src/main.c:213: void updateCharacter(TCharacter *c){
                           1141 ;	---------------------------------
                           1142 ; Function updateCharacter
                           1143 ; ---------------------------------
   0589                    1144 _updateCharacter::
   0589 DD E5         [15] 1145 	push	ix
   058B DD 21 00 00   [14] 1146 	ld	ix,#0
   058F DD 39         [15] 1147 	add	ix,sp
   0591 21 F8 FF      [10] 1148 	ld	hl, #-8
   0594 39            [11] 1149 	add	hl, sp
   0595 F9            [ 6] 1150 	ld	sp, hl
                           1151 ;src/main.c:215: if (c->motion)
   0596 DD 4E 04      [19] 1152 	ld	c,4 (ix)
   0599 DD 46 05      [19] 1153 	ld	b,5 (ix)
   059C C5            [11] 1154 	push	bc
   059D FD E1         [14] 1155 	pop	iy
   059F FD 7E 0F      [19] 1156 	ld	a, 15 (iy)
   05A2 B7            [ 4] 1157 	or	a, a
   05A3 28 07         [12] 1158 	jr	Z,00102$
                           1159 ;src/main.c:216: motionUpdate(c);
   05A5 C5            [11] 1160 	push	bc
   05A6 C5            [11] 1161 	push	bc
   05A7 CDr42r04      [17] 1162 	call	_motionUpdate
   05AA F1            [10] 1163 	pop	af
   05AB C1            [10] 1164 	pop	bc
   05AC                    1165 00102$:
                           1166 ;src/main.c:220: c->vx = (c->a * cosine(c->dir * DIR_STEP));
   05AC 21 08 00      [10] 1167 	ld	hl, #0x0008
   05AF 09            [11] 1168 	add	hl,bc
   05B0 DD 75 FC      [19] 1169 	ld	-4 (ix), l
   05B3 DD 74 FD      [19] 1170 	ld	-3 (ix), h
   05B6 21 0C 00      [10] 1171 	ld	hl, #0x000c
   05B9 09            [11] 1172 	add	hl,bc
   05BA DD 75 FA      [19] 1173 	ld	-6 (ix), l
   05BD DD 74 FB      [19] 1174 	ld	-5 (ix), h
   05C0 7E            [ 7] 1175 	ld	a, (hl)
   05C1 DD 77 F8      [19] 1176 	ld	-8 (ix), a
   05C4 23            [ 6] 1177 	inc	hl
   05C5 7E            [ 7] 1178 	ld	a, (hl)
   05C6 DD 77 F9      [19] 1179 	ld	-7 (ix), a
   05C9 21 0E 00      [10] 1180 	ld	hl, #0x000e
   05CC 09            [11] 1181 	add	hl,bc
   05CD DD 75 FE      [19] 1182 	ld	-2 (ix), l
   05D0 DD 74 FF      [19] 1183 	ld	-1 (ix), h
   05D3 56            [ 7] 1184 	ld	d, (hl)
   05D4 C5            [11] 1185 	push	bc
   05D5 D5            [11] 1186 	push	de
   05D6 33            [ 6] 1187 	inc	sp
   05D7 CDr00r00      [17] 1188 	call	___uchar2fs
   05DA 33            [ 6] 1189 	inc	sp
   05DB EB            [ 4] 1190 	ex	de, hl
   05DC E5            [11] 1191 	push	hl
   05DD D5            [11] 1192 	push	de
   05DE 21 B3 3F      [10] 1193 	ld	hl, #0x3fb3
   05E1 E5            [11] 1194 	push	hl
   05E2 21 33 33      [10] 1195 	ld	hl, #0x3333
   05E5 E5            [11] 1196 	push	hl
   05E6 CDr00r00      [17] 1197 	call	___fsmul
   05E9 F1            [10] 1198 	pop	af
   05EA F1            [10] 1199 	pop	af
   05EB F1            [10] 1200 	pop	af
   05EC F1            [10] 1201 	pop	af
   05ED D5            [11] 1202 	push	de
   05EE E5            [11] 1203 	push	hl
   05EF CDr00r00      [17] 1204 	call	___fs2sint
   05F2 F1            [10] 1205 	pop	af
   05F3 E3            [19] 1206 	ex	(sp),hl
   05F4 CDr00r00      [17] 1207 	call	_cosine
   05F7 E3            [19] 1208 	ex	(sp),hl
   05F8 DD 6E F8      [19] 1209 	ld	l,-8 (ix)
   05FB DD 66 F9      [19] 1210 	ld	h,-7 (ix)
   05FE E5            [11] 1211 	push	hl
   05FF CDr00r00      [17] 1212 	call	__mulint
   0602 F1            [10] 1213 	pop	af
   0603 F1            [10] 1214 	pop	af
   0604 EB            [ 4] 1215 	ex	de,hl
   0605 C1            [10] 1216 	pop	bc
   0606 DD 6E FC      [19] 1217 	ld	l,-4 (ix)
   0609 DD 66 FD      [19] 1218 	ld	h,-3 (ix)
   060C 73            [ 7] 1219 	ld	(hl), e
   060D 23            [ 6] 1220 	inc	hl
   060E 72            [ 7] 1221 	ld	(hl), d
                           1222 ;src/main.c:221: c->vy = - (c->a * sine(c->dir * DIR_STEP));
   060F 21 0A 00      [10] 1223 	ld	hl, #0x000a
   0612 09            [11] 1224 	add	hl,bc
   0613 E3            [19] 1225 	ex	(sp), hl
   0614 DD 6E FA      [19] 1226 	ld	l,-6 (ix)
   0617 DD 66 FB      [19] 1227 	ld	h,-5 (ix)
   061A 7E            [ 7] 1228 	ld	a, (hl)
   061B DD 77 FA      [19] 1229 	ld	-6 (ix), a
   061E 23            [ 6] 1230 	inc	hl
   061F 7E            [ 7] 1231 	ld	a, (hl)
   0620 DD 77 FB      [19] 1232 	ld	-5 (ix), a
   0623 DD 6E FE      [19] 1233 	ld	l,-2 (ix)
   0626 DD 66 FF      [19] 1234 	ld	h,-1 (ix)
   0629 56            [ 7] 1235 	ld	d, (hl)
   062A C5            [11] 1236 	push	bc
   062B D5            [11] 1237 	push	de
   062C 33            [ 6] 1238 	inc	sp
   062D CDr00r00      [17] 1239 	call	___uchar2fs
   0630 33            [ 6] 1240 	inc	sp
   0631 EB            [ 4] 1241 	ex	de, hl
   0632 E5            [11] 1242 	push	hl
   0633 D5            [11] 1243 	push	de
   0634 21 B3 3F      [10] 1244 	ld	hl, #0x3fb3
   0637 E5            [11] 1245 	push	hl
   0638 21 33 33      [10] 1246 	ld	hl, #0x3333
   063B E5            [11] 1247 	push	hl
   063C CDr00r00      [17] 1248 	call	___fsmul
   063F F1            [10] 1249 	pop	af
   0640 F1            [10] 1250 	pop	af
   0641 F1            [10] 1251 	pop	af
   0642 F1            [10] 1252 	pop	af
   0643 D5            [11] 1253 	push	de
   0644 E5            [11] 1254 	push	hl
   0645 CDr00r00      [17] 1255 	call	___fs2sint
   0648 F1            [10] 1256 	pop	af
   0649 E3            [19] 1257 	ex	(sp),hl
   064A CDr00r00      [17] 1258 	call	_sine
   064D E3            [19] 1259 	ex	(sp),hl
   064E DD 6E FA      [19] 1260 	ld	l,-6 (ix)
   0651 DD 66 FB      [19] 1261 	ld	h,-5 (ix)
   0654 E5            [11] 1262 	push	hl
   0655 CDr00r00      [17] 1263 	call	__mulint
   0658 F1            [10] 1264 	pop	af
   0659 F1            [10] 1265 	pop	af
   065A C1            [10] 1266 	pop	bc
   065B AF            [ 4] 1267 	xor	a, a
   065C 95            [ 4] 1268 	sub	a, l
   065D 5F            [ 4] 1269 	ld	e, a
   065E 3E 00         [ 7] 1270 	ld	a, #0x00
   0660 9C            [ 4] 1271 	sbc	a, h
   0661 57            [ 4] 1272 	ld	d, a
   0662 E1            [10] 1273 	pop	hl
   0663 E5            [11] 1274 	push	hl
   0664 73            [ 7] 1275 	ld	(hl), e
   0665 23            [ 6] 1276 	inc	hl
   0666 72            [ 7] 1277 	ld	(hl), d
                           1278 ;src/main.c:236: c->x = c->x + c->vx;
   0667 69            [ 4] 1279 	ld	l, c
   0668 60            [ 4] 1280 	ld	h, b
   0669 5E            [ 7] 1281 	ld	e, (hl)
   066A 23            [ 6] 1282 	inc	hl
   066B 56            [ 7] 1283 	ld	d, (hl)
   066C DD 6E FC      [19] 1284 	ld	l,-4 (ix)
   066F DD 66 FD      [19] 1285 	ld	h,-3 (ix)
   0672 7E            [ 7] 1286 	ld	a, (hl)
   0673 23            [ 6] 1287 	inc	hl
   0674 66            [ 7] 1288 	ld	h, (hl)
   0675 6F            [ 4] 1289 	ld	l, a
   0676 19            [11] 1290 	add	hl,de
   0677 EB            [ 4] 1291 	ex	de,hl
   0678 69            [ 4] 1292 	ld	l, c
   0679 60            [ 4] 1293 	ld	h, b
   067A 73            [ 7] 1294 	ld	(hl), e
   067B 23            [ 6] 1295 	inc	hl
   067C 72            [ 7] 1296 	ld	(hl), d
                           1297 ;src/main.c:237: c->y = c->y + c->vy;
   067D 03            [ 6] 1298 	inc	bc
   067E 03            [ 6] 1299 	inc	bc
   067F 69            [ 4] 1300 	ld	l, c
   0680 60            [ 4] 1301 	ld	h, b
   0681 5E            [ 7] 1302 	ld	e, (hl)
   0682 23            [ 6] 1303 	inc	hl
   0683 56            [ 7] 1304 	ld	d, (hl)
   0684 E1            [10] 1305 	pop	hl
   0685 E5            [11] 1306 	push	hl
   0686 7E            [ 7] 1307 	ld	a, (hl)
   0687 23            [ 6] 1308 	inc	hl
   0688 66            [ 7] 1309 	ld	h, (hl)
   0689 6F            [ 4] 1310 	ld	l, a
   068A 19            [11] 1311 	add	hl,de
   068B EB            [ 4] 1312 	ex	de,hl
   068C 7B            [ 4] 1313 	ld	a, e
   068D 02            [ 7] 1314 	ld	(bc), a
   068E 03            [ 6] 1315 	inc	bc
   068F 7A            [ 4] 1316 	ld	a, d
   0690 02            [ 7] 1317 	ld	(bc), a
   0691 DD F9         [10] 1318 	ld	sp, ix
   0693 DD E1         [14] 1319 	pop	ix
   0695 C9            [10] 1320 	ret
                           1321 ;src/main.c:244: void init(TCharacter *c){
                           1322 ;	---------------------------------
                           1323 ; Function init
                           1324 ; ---------------------------------
   0696                    1325 _init::
   0696 DD E5         [15] 1326 	push	ix
   0698 DD 21 00 00   [14] 1327 	ld	ix,#0
   069C DD 39         [15] 1328 	add	ix,sp
                           1329 ;src/main.c:246: g_nInterrupt = 0; // Manage Interrupt
   069E 21r01r00      [10] 1330 	ld	hl,#_g_nInterrupt + 0
   06A1 36 00         [10] 1331 	ld	(hl), #0x00
                           1332 ;src/main.c:247: i_time = 0;
   06A3 AF            [ 4] 1333 	xor	a, a
   06A4 FD 21r02r00   [14] 1334 	ld	iy, #_i_time
   06A8 FD 77 00      [19] 1335 	ld	0 (iy), a
   06AB FD 77 01      [19] 1336 	ld	1 (iy), a
   06AE FD 77 02      [19] 1337 	ld	2 (iy), a
   06B1 FD 77 03      [19] 1338 	ld	3 (iy), a
                           1339 ;src/main.c:248: cpct_setInterruptHandler((void*) myInterruptHandler);
   06B4 21r00r00      [10] 1340 	ld	hl, #_myInterruptHandler
   06B7 CDr00r00      [17] 1341 	call	_cpct_setInterruptHandler
                           1342 ;src/main.c:249: cpct_setVideoMode(0);
   06BA 2E 00         [ 7] 1343 	ld	l, #0x00
   06BC CDr00r00      [17] 1344 	call	_cpct_setVideoMode
                           1345 ;src/main.c:251: c->x = 20 << 8;
   06BF DD 4E 04      [19] 1346 	ld	c,4 (ix)
   06C2 DD 46 05      [19] 1347 	ld	b,5 (ix)
   06C5 69            [ 4] 1348 	ld	l, c
   06C6 60            [ 4] 1349 	ld	h, b
   06C7 36 00         [10] 1350 	ld	(hl), #0x00
   06C9 23            [ 6] 1351 	inc	hl
   06CA 36 14         [10] 1352 	ld	(hl), #0x14
                           1353 ;src/main.c:252: c->px = c->x ;
   06CC FD 21 04 00   [14] 1354 	ld	iy, #0x0004
   06D0 FD 09         [15] 1355 	add	iy, bc
   06D2 69            [ 4] 1356 	ld	l, c
   06D3 60            [ 4] 1357 	ld	h, b
   06D4 5E            [ 7] 1358 	ld	e, (hl)
   06D5 23            [ 6] 1359 	inc	hl
   06D6 56            [ 7] 1360 	ld	d, (hl)
   06D7 FD 73 00      [19] 1361 	ld	0 (iy), e
   06DA FD 72 01      [19] 1362 	ld	1 (iy), d
                           1363 ;src/main.c:253: c->y = 20 << 8;
   06DD 69            [ 4] 1364 	ld	l, c
   06DE 60            [ 4] 1365 	ld	h, b
   06DF 23            [ 6] 1366 	inc	hl
   06E0 23            [ 6] 1367 	inc	hl
   06E1 36 00         [10] 1368 	ld	(hl), #0x00
   06E3 23            [ 6] 1369 	inc	hl
   06E4 36 14         [10] 1370 	ld	(hl), #0x14
   06E6 2B            [ 6] 1371 	dec	hl
                           1372 ;src/main.c:254: c->py = c->y;
   06E7 FD 21 06 00   [14] 1373 	ld	iy, #0x0006
   06EB FD 09         [15] 1374 	add	iy, bc
   06ED 5E            [ 7] 1375 	ld	e, (hl)
   06EE 23            [ 6] 1376 	inc	hl
   06EF 56            [ 7] 1377 	ld	d, (hl)
   06F0 FD 73 00      [19] 1378 	ld	0 (iy), e
   06F3 FD 72 01      [19] 1379 	ld	1 (iy), d
                           1380 ;src/main.c:255: c->vx = 0;
   06F6 21 08 00      [10] 1381 	ld	hl, #0x0008
   06F9 09            [11] 1382 	add	hl, bc
   06FA AF            [ 4] 1383 	xor	a, a
   06FB 77            [ 7] 1384 	ld	(hl), a
   06FC 23            [ 6] 1385 	inc	hl
   06FD 77            [ 7] 1386 	ld	(hl), a
                           1387 ;src/main.c:256: c->vy = 0;
   06FE 21 0A 00      [10] 1388 	ld	hl, #0x000a
   0701 09            [11] 1389 	add	hl, bc
   0702 AF            [ 4] 1390 	xor	a, a
   0703 77            [ 7] 1391 	ld	(hl), a
   0704 23            [ 6] 1392 	inc	hl
   0705 77            [ 7] 1393 	ld	(hl), a
                           1394 ;src/main.c:257: c->a = 0;
   0706 21 0C 00      [10] 1395 	ld	hl, #0x000c
   0709 09            [11] 1396 	add	hl, bc
   070A AF            [ 4] 1397 	xor	a, a
   070B 77            [ 7] 1398 	ld	(hl), a
   070C 23            [ 6] 1399 	inc	hl
   070D 77            [ 7] 1400 	ld	(hl), a
                           1401 ;src/main.c:258: c->dir = 0;
   070E 21 0E 00      [10] 1402 	ld	hl, #0x000e
   0711 09            [11] 1403 	add	hl, bc
   0712 36 00         [10] 1404 	ld	(hl), #0x00
                           1405 ;src/main.c:259: c->motion = 0;
   0714 21 0F 00      [10] 1406 	ld	hl, #0x000f
   0717 09            [11] 1407 	add	hl, bc
   0718 36 00         [10] 1408 	ld	(hl), #0x00
                           1409 ;src/main.c:260: c->target = 0;
   071A 21 10 00      [10] 1410 	ld	hl, #0x0010
   071D 09            [11] 1411 	add	hl, bc
   071E 36 00         [10] 1412 	ld	(hl), #0x00
                           1413 ;src/main.c:262: printWayPoints();
   0720 CDr2Dr01      [17] 1414 	call	_printWayPoints
                           1415 ;src/main.c:264: pause = 0;
   0723 21r00r00      [10] 1416 	ld	hl,#_pause + 0
   0726 36 00         [10] 1417 	ld	(hl), #0x00
   0728 DD E1         [14] 1418 	pop	ix
   072A C9            [10] 1419 	ret
                           1420 ;src/main.c:268: void main(void) {
                           1421 ;	---------------------------------
                           1422 ; Function main
                           1423 ; ---------------------------------
   072B                    1424 _main::
   072B DD E5         [15] 1425 	push	ix
   072D 21 EF FF      [10] 1426 	ld	hl, #-17
   0730 39            [11] 1427 	add	hl, sp
   0731 F9            [ 6] 1428 	ld	sp, hl
                           1429 ;src/main.c:272: init(&c);
   0732 21 00 00      [10] 1430 	ld	hl, #0x0000
   0735 39            [11] 1431 	add	hl, sp
   0736 4D            [ 4] 1432 	ld	c, l
   0737 44            [ 4] 1433 	ld	b, h
   0738 59            [ 4] 1434 	ld	e, c
   0739 50            [ 4] 1435 	ld	d, b
   073A C5            [11] 1436 	push	bc
   073B D5            [11] 1437 	push	de
   073C CDr96r06      [17] 1438 	call	_init
   073F F1            [10] 1439 	pop	af
   0740 C1            [10] 1440 	pop	bc
                           1441 ;src/main.c:274: printCharacter(&c);
   0741 59            [ 4] 1442 	ld	e, c
   0742 50            [ 4] 1443 	ld	d, b
   0743 C5            [11] 1444 	push	bc
   0744 D5            [11] 1445 	push	de
   0745 CDr76r00      [17] 1446 	call	_printCharacter
   0748 F1            [10] 1447 	pop	af
   0749 C1            [10] 1448 	pop	bc
                           1449 ;src/main.c:277: while (1){    
   074A                    1450 00102$:
                           1451 ;src/main.c:279: cpct_waitHalts(100);
   074A C5            [11] 1452 	push	bc
   074B 2E 64         [ 7] 1453 	ld	l, #0x64
   074D CDr00r00      [17] 1454 	call	_cpct_waitHalts
   0750 C1            [10] 1455 	pop	bc
                           1456 ;src/main.c:280: getCharacterInput(&c);
   0751 59            [ 4] 1457 	ld	e, c
   0752 50            [ 4] 1458 	ld	d, b
   0753 C5            [11] 1459 	push	bc
   0754 D5            [11] 1460 	push	de
   0755 CDr76r03      [17] 1461 	call	_getCharacterInput
   0758 F1            [10] 1462 	pop	af
   0759 C1            [10] 1463 	pop	bc
                           1464 ;src/main.c:281: updateCharacter(&c);
   075A 59            [ 4] 1465 	ld	e, c
   075B 50            [ 4] 1466 	ld	d, b
   075C C5            [11] 1467 	push	bc
   075D D5            [11] 1468 	push	de
   075E CDr89r05      [17] 1469 	call	_updateCharacter
   0761 F1            [10] 1470 	pop	af
   0762 C1            [10] 1471 	pop	bc
                           1472 ;src/main.c:282: eraseCharacter(&c);
   0763 59            [ 4] 1473 	ld	e, c
   0764 50            [ 4] 1474 	ld	d, b
   0765 C5            [11] 1475 	push	bc
   0766 D5            [11] 1476 	push	de
   0767 CDr34r00      [17] 1477 	call	_eraseCharacter
   076A F1            [10] 1478 	pop	af
   076B C1            [10] 1479 	pop	bc
                           1480 ;src/main.c:283: printCharacter(&c);
   076C 59            [ 4] 1481 	ld	e, c
   076D 50            [ 4] 1482 	ld	d, b
   076E C5            [11] 1483 	push	bc
   076F D5            [11] 1484 	push	de
   0770 CDr76r00      [17] 1485 	call	_printCharacter
   0773 F1            [10] 1486 	pop	af
   0774 C1            [10] 1487 	pop	bc
                           1488 ;src/main.c:284: c.px = c.x;
   0775 FD 21 04 00   [14] 1489 	ld	iy, #0x0004
   0779 FD 09         [15] 1490 	add	iy, bc
   077B 69            [ 4] 1491 	ld	l, c
   077C 60            [ 4] 1492 	ld	h, b
   077D 5E            [ 7] 1493 	ld	e, (hl)
   077E 23            [ 6] 1494 	inc	hl
   077F 56            [ 7] 1495 	ld	d, (hl)
   0780 FD 73 00      [19] 1496 	ld	0 (iy), e
   0783 FD 72 01      [19] 1497 	ld	1 (iy), d
                           1498 ;src/main.c:285: c.py = c.y;
   0786 FD 21 06 00   [14] 1499 	ld	iy, #0x0006
   078A FD 09         [15] 1500 	add	iy, bc
   078C 69            [ 4] 1501 	ld	l, c
   078D 60            [ 4] 1502 	ld	h, b
   078E 23            [ 6] 1503 	inc	hl
   078F 23            [ 6] 1504 	inc	hl
   0790 5E            [ 7] 1505 	ld	e, (hl)
   0791 23            [ 6] 1506 	inc	hl
   0792 56            [ 7] 1507 	ld	d, (hl)
   0793 FD 73 00      [19] 1508 	ld	0 (iy), e
   0796 FD 72 01      [19] 1509 	ld	1 (iy), d
   0799 18 AF         [12] 1510 	jr	00102$
                           1511 	.area _CODE
                           1512 	.area _INITIALIZER
                           1513 	.area _CABS (ABS)
